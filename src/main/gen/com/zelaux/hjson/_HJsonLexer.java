// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _hjson.flex

package com.zelaux.hjson;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.zelaux.hjson.HJsonElementTypes.*;


public class _HJsonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\3\0\1\6\2\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\12\15\1\16\12\0\1\17\25\0"+
    "\1\20\1\21\1\22\3\0\1\23\3\0\1\24\1\25"+
    "\5\0\1\26\1\0\1\27\3\0\1\30\1\31\1\32"+
    "\1\33\5\0\1\34\1\0\1\35\7\0\1\3\32\0"+
    "\1\1\u01bf\0\12\15\206\0\12\15\306\0\12\15\234\0"+
    "\12\15\166\0\12\15\140\0\12\15\166\0\12\15\106\0"+
    "\12\15\u0116\0\12\15\106\0\12\15\346\0\1\1\u015f\0"+
    "\12\15\46\0\12\15\u012c\0\12\15\200\0\12\15\246\0"+
    "\12\15\6\0\12\15\266\0\12\15\126\0\12\15\206\0"+
    "\12\15\6\0\12\15\246\0\13\1\35\0\2\3\5\0"+
    "\1\1\57\0\1\1\240\0\1\1\u01cf\0\12\15\46\0"+
    "\12\15\306\0\12\15\26\0\12\15\126\0\12\15\u0196\0"+
    "\12\15\6\0\u0100\36\240\0\12\15\206\0\12\15\u012c\0"+
    "\12\15\200\0\12\15\74\0\12\15\220\0\12\15\166\0"+
    "\12\15\146\0\12\15\206\0\12\15\106\0\12\15\266\0"+
    "\12\15\u0164\0\62\15\100\0\12\15\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\12\3\1\1\13\1\14\2\15"+
    "\1\0\1\4\2\16\1\0\1\17\5\1\1\16\1\20"+
    "\1\17\1\1\1\7\1\1\1\7\3\1\2\0\1\17"+
    "\1\1\1\21\1\22\1\0\1\17\1\23\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[51];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\272\0\272\0\272\0\u0136\0\u0155\0\u0174"+
    "\0\272\0\272\0\135\0\272\0\u0193\0\u01b2\0\u01d1\0\u01f0"+
    "\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b\0\u02aa\0\u02c9\0\272"+
    "\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364\0\u0364\0\u0383\0\u03a2"+
    "\0\u03c1\0\u03e0\0\u03ff\0\37\0\u041e\0\37\0\37\0\u043d"+
    "\0\272\0\37\0\272";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[51];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\2\2\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\2\1\14\1\2\1\15"+
    "\2\2\1\16\1\2\1\17\2\2\1\20\1\2\1\21"+
    "\1\22\2\2\3\0\5\2\1\0\4\2\1\0\20\2"+
    "\1\0\3\3\33\0\2\23\1\0\1\23\1\24\14\23"+
    "\1\25\15\23\1\5\1\26\2\0\5\5\1\26\4\5"+
    "\1\26\17\5\1\2\2\27\1\0\3\27\1\30\12\27"+
    "\1\31\15\27\37\0\1\2\3\0\5\2\1\0\3\2"+
    "\1\12\1\0\21\2\3\0\3\2\1\32\1\2\1\0"+
    "\2\2\1\5\1\2\1\0\21\2\3\0\5\2\1\0"+
    "\1\2\1\33\1\2\1\12\1\0\1\34\4\2\1\34"+
    "\13\2\3\0\5\2\1\0\4\2\1\0\4\2\1\35"+
    "\14\2\3\0\5\2\1\0\4\2\1\0\14\2\1\36"+
    "\4\2\3\0\5\2\1\0\4\2\1\0\11\2\1\37"+
    "\6\2\2\23\1\0\34\23\2\26\2\0\32\26\1\0"+
    "\2\27\1\0\3\27\1\40\12\27\1\31\15\27\6\0"+
    "\1\41\30\0\2\27\1\0\34\27\1\32\3\42\3\32"+
    "\1\43\1\32\1\42\4\32\1\42\20\32\1\2\3\0"+
    "\5\2\1\0\3\2\1\44\1\0\21\2\3\0\4\2"+
    "\1\45\1\0\1\45\2\2\1\46\1\0\21\2\3\0"+
    "\5\2\1\0\4\2\1\0\7\2\1\47\11\2\3\0"+
    "\5\2\1\0\4\2\1\0\7\2\1\50\11\2\3\0"+
    "\5\2\1\0\4\2\1\0\14\2\1\51\3\2\6\41"+
    "\1\52\30\41\7\42\1\53\27\42\1\32\3\42\3\32"+
    "\1\43\1\32\1\42\2\32\1\54\1\32\1\42\20\32"+
    "\1\2\3\0\5\2\1\0\3\2\1\44\1\0\1\34"+
    "\4\2\1\34\13\2\3\0\5\2\1\0\3\2\1\46"+
    "\1\0\21\2\3\0\5\2\1\0\4\2\1\0\12\2"+
    "\1\55\6\2\3\0\5\2\1\0\4\2\1\0\7\2"+
    "\1\56\11\2\3\0\5\2\1\0\4\2\1\0\5\2"+
    "\1\57\12\2\6\41\1\60\30\41\7\42\1\53\4\42"+
    "\1\61\22\42\1\2\3\0\5\2\1\0\4\2\1\0"+
    "\5\2\1\62\12\2\6\41\1\63\30\41";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1116];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\5\1\1\11\3\1\3\11\3\1\2\11\1\1"+
    "\1\11\1\0\3\1\1\0\6\1\1\11\11\1\2\0"+
    "\4\1\1\0\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[51];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _HJsonLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HJsonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return QUOTELESS_STRING_TOKEN;
            }
          // fall through
          case 20: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 21: break;
          case 3:
            { return DOUBLE_QUOTE;
            }
          // fall through
          case 22: break;
          case 4:
            { return LINE_COMMENT_TOKEN;
            }
          // fall through
          case 23: break;
          case 5:
            { return SINGLE_QUOTE;
            }
          // fall through
          case 24: break;
          case 6:
            { return COMMA;
            }
          // fall through
          case 25: break;
          case 7:
            { return NUMBER_TOKEN;
            }
          // fall through
          case 26: break;
          case 8:
            { return COLON;
            }
          // fall through
          case 27: break;
          case 9:
            { return L_BRACKET;
            }
          // fall through
          case 28: break;
          case 10:
            { return R_BRACKET;
            }
          // fall through
          case 29: break;
          case 11:
            { return L_CURLY;
            }
          // fall through
          case 30: break;
          case 12:
            { return R_CURLY;
            }
          // fall through
          case 31: break;
          case 13:
            { return DOUBLE_QUOTED_STRING_TOKEN;
            }
          // fall through
          case 32: break;
          case 14:
            { return SINGLE_QUOTED_STRING_TOKEN;
            }
          // fall through
          case 33: break;
          case 15:
            { return BLOCK_COMMENT_TOKEN;
            }
          // fall through
          case 34: break;
          case 16:
            { return MULTILINE_STRING_TOKEN;
            }
          // fall through
          case 35: break;
          case 17:
            { return NULL;
            }
          // fall through
          case 36: break;
          case 18:
            { return TRUE;
            }
          // fall through
          case 37: break;
          case 19:
            { return FALSE;
            }
          // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
